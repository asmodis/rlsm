require File.join(File.dirname(__FILE__), '..', 'lib', 'rlsm', 'monoid')

describe RLSM::Monoid, "basic stuff" do
  before :each do
    @m1 = RLSM::Monoid.new '0'
    @m2 = RLSM::Monoid.new '00 01' #-> 01 11
    @m3 = RLSM::Monoid.new '012 112 212'
  end

  it "should have '0' as the neutral element" do
    @m1[0,0].should == 0
    
    [0,1].each { |x| @m2[0,x].should == x; @m2[x,0].should == x } 
    [0,1,2].each { |x| @m3[0,x].should == x; @m3[x,0].should == x } 
  end

  it "should decide if an other monoid is isomorphic" do
    @m2.should == RLSM::Monoid.new('01 11')
    @m3.should == RLSM::Monoid.new('002 012 022')

    @m2.should_not == @m3

    @m2.should_not == RLSM::Monoid.new('01 10')
  end
  
end

describe RLSM::Monoid do
  before :each do
    @m0 = RLSM::Monoid.new '0'
    @m1 = RLSM::Monoid.new '01 11'
    @m2 = RLSM::Monoid.new '0123 1032 2323 3232'
  end

  [[],[0],[1], [2], [1,2], [1,3], [2,3], [1,2,3]].each do |set|
    @m0 = RLSM::Monoid.new '0'
    @m1 = RLSM::Monoid.new '01 11'
    @m2 = RLSM::Monoid.new '0123 1032 2323 3232'

    case set
    when [], [0]
      [@m0, @m1, @m2].each do |m|
        it "should calculate the submonoid of #{m} generated by #{set}" do
          sm = m.get_submonoid(set)
          sm.should_not be_nil
          sm.should == RLSM::Monoid.new('0')
        end
      end
    when [1]
      it "should calculate the submonoid of #{@m1} generated by #{set}" do
        @m1.get_submonoid(set).should == @m1
      end

      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == RLSM::Monoid.new('01 10')
      end
    when [2]
      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == @m1
      end
    when [1,2]
      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == @m2
      end
    when [1,3]
      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == @m2
      end
    when [2,3]
      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == RLSM::Monoid.new('012 112 221')
      end
    when [1,2,3]
      it "should calculate the submonoid of #{@m2} generated by #{set}" do
        @m2.get_submonoid(set).should == @m2
      end
    end
  end

  it "should calculate the generator subset of #{RLSM::Monoid.new('0')}" do
    RLSM::Monoid.new('0').generating_subset.should == []
  end

  it "should calculate the generator subset of #{RLSM::Monoid.new('01 11')}" do
    RLSM::Monoid.new('01 11').generating_subset.should == [1]
  end

  it "should calculate the generator subset of #{RLSM::Monoid.new('0123 1032 2323 3232')}" do
    RLSM::Monoid.new('0123 1032 2323 3232').generating_subset.should == [1,2]
  end
end


describe RLSM::Monoid do
  before :each do
    @m1 = RLSM::Monoid.new '012345 113315 245255 315355 442245 555555'
    @m2 = RLSM::Monoid.new '012345 103254 235454 324545 455454 544545'
  end

  it "should calculate left ideals of elements" do
    @m1.left_ideal_of(0).should == [0,1,2,3,4,5]
    @m1.left_ideal_of(1).should == [1,4,5]
    @m1.left_ideal_of(2).should == [2,3,5]
    @m1.left_ideal_of(3).should == [2,3,5]
    @m1.left_ideal_of(4).should == [1,4,5]
    @m1.left_ideal_of(5).should == [5]
  end

  it "should calculate right ideals of elements" do
    @m1.right_ideal_of(0).should == [0,1,2,3,4,5]
    @m1.right_ideal_of(1).should == [1,3,5]
    @m1.right_ideal_of(2).should == [2,4,5]
    @m1.right_ideal_of(3).should == [1,3,5]
    @m1.right_ideal_of(4).should == [2,4,5]
    @m1.right_ideal_of(5).should == [5]
  end

  it "should calculate ideals of elements" do
    @m1.ideal_of(0).should == [0,1,2,3,4,5]
    @m1.ideal_of(1).should == [1,2,3,4,5]
    @m1.ideal_of(2).should == [1,2,3,4,5]
    @m1.ideal_of(3).should == [1,2,3,4,5]
    @m1.ideal_of(4).should == [1,2,3,4,5]
    @m1.ideal_of(5).should == [5]
  end

  it "should calculate L-classes of elements" do
    @m1.l_class_of(0).should == [0]
    @m1.l_class_of(1).should == [1,4]
    @m1.l_class_of(2).should == [2,3]
    @m1.l_class_of(3).should == [2,3]
    @m1.l_class_of(4).should == [1,4]
    @m1.l_class_of(5).should == [5]
  end

  it "should calculate R-classes of elements" do
    @m1.r_class_of(0).should == [0]
    @m1.r_class_of(1).should == [1,3]
    @m1.r_class_of(2).should == [2,4]
    @m1.r_class_of(3).should == [1,3]
    @m1.r_class_of(4).should == [2,4]
    @m1.r_class_of(5).should == [5]
  end

#  it "should calculate J-classes of elements" do
#    @m1.j_class_of(0).should == [0]
#    @m1.j_class_of(1).should == [1,2,3,4]
#    @m1.j_class_of(2).should == [1,2,3,4]
#    @m1.j_class_of(3).should == [1,2,3,4]
#    @m1.j_class_of(4).should == [1,2,3,4]
#    @m1.j_class_of(5).should == [5]
#  end

  it "should calculate H-classes of elements" do
    @m1.h_class_of(0).should == [0]
    @m1.h_class_of(1).should == [1]
    @m1.h_class_of(2).should == [2]
    @m1.h_class_of(3).should == [3]
    @m1.h_class_of(4).should == [4]
    @m1.h_class_of(5).should == [5]
  end

  it "should calculate D-classes of elements" do
    @m1.d_class_of(0).should == [0]
    @m1.d_class_of(1).should == [1,2,3,4]
    @m1.d_class_of(2).should == [1,2,3,4]
    @m1.d_class_of(3).should == [1,2,3,4]
    @m1.d_class_of(4).should == [1,2,3,4]
    @m1.d_class_of(5).should == [5]
  end

  it "should detect aperiodicity" do 
    @m1.aperiodic?.should == true
    @m2.aperiodic?.should == false
  end
end

describe RLSM::Monoid do
  before :each do
    @m1 = RLSM::Monoid.new '0'
    @m2 = RLSM::Monoid.new '01 10'
    @m3 = RLSM::Monoid.new '01 11'
    @m4 = RLSM::Monoid.new '012 102 222'
  end

  it "should detect a null element" do
    @m1.null_element.should == false
    @m2.null_element.should == false
    @m3.null_element.should == 1
    @m4.null_element.should == 2
  end

  it "should detect idempotent elements" do
    [@m1, @m2, @m3].each { |m| m.idempotent?(0).should == true }
    @m2.idempotent?(1).should == false
    @m3.idempotent?(1).should == true
    @m4.idempotent?(2).should == true
    @m4.idempotent?(1).should == false
  end

  it "should find all idempotents" do
    @m1.idempotents.should == [0]
    @m2.idempotents.should == [0]
    @m3.idempotents.should == [0,1]
    @m4.idempotents.should == [0,2]
  end

  it "should decide if all elements are idempotent" do
    @m1.idempotent?.should == true
    @m2.idempotent?.should == false
    @m3.idempotent?.should == true
    @m4.idempotent?.should == false
  end
end

describe RLSM::Monoid do
  before :each do
    @m1 = RLSM::Monoid.new('0123 1032 2323 3232')
  end

  it "should calculate all submonoids of a given order upto to isomorphie" do
    @m1.submonoids_of_order(1).should == [RLSM::Monoid.new('0')]
    @m1.submonoids_of_order(2).should == [RLSM::Monoid.new('01 10'), RLSM::Monoid.new('01 11')]
    @m1.submonoids_of_order(3).should == [RLSM::Monoid.new('012 112 221')]
    @m1.submonoids_of_order(4).should == [@m1]
  end

  it "should calculate all submonoids upto to isomorphie" do
    @m1.submonoids.should == [RLSM::Monoid.new('0'), RLSM::Monoid.new('01 10'), RLSM::Monoid.new('01 11'),RLSM::Monoid.new('012 112 221'), @m1]

    RLSM::Monoid.new('0').submonoids.should == [RLSM::Monoid.new('0')]
  end

  it "should calculate all proper submonoids upto to isomorphie" do
    @m1.proper_submonoids.should == [RLSM::Monoid.new('01 10'), RLSM::Monoid.new('01 11'),RLSM::Monoid.new('012 112 221')]

    RLSM::Monoid.new('0').proper_submonoids.should == []
  end
end

describe RLSM::Monoid do
  ['0', '01 11', '012 112 212', '01234 11111 21212 31133 41234'].each do |tab|
    it "should detect syntacticity of #{tab}" do
      RLSM::Monoid.new(tab).syntactic?.should == true
    end

    it "should find a disjunctive subset of #{tab}" do
      case tab
      when '0' 
        RLSM::Monoid.new(tab).disjunctive_subset.should == []
      when '01 11'
        RLSM::Monoid.new(tab).disjunctive_subset.should == [0]
      when '012 112 212'
        RLSM::Monoid.new(tab).disjunctive_subset.should == [1]
      when '01234 11111 21212 31133 41234'
        RLSM::Monoid.new(tab).disjunctive_subset.should == [0,4]
      end
    end
  end

  ['0123 1111 2222 3333', '01234 10234 22222 33222 44222'].each do |tab|
    it "should detect nonsyntacticity of #{tab}" do
      RLSM::Monoid.new(tab).syntactic?.should == false
    end

    it "should not find a disjunctive subset of #{tab}" do
      RLSM::Monoid.new(tab).disjunctive_subset.should be_nil
    end
  end
end
