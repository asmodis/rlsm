#! /usr/bin/env ruby
require File.expand_path(File.join(File.dirname(__FILE__), '..',
                                   'lib', 'rlsm'))
require 'monoid'
require 'dfa'
require 're'
require 'database'

class SMON
  def initialize(args = [])
    puts "Welcome to SMON (v#{RLSM::VERSION})"

    @objects = []
  end

  def run(args)
    if args.empty?
      interactive_mode
    else
      args.each do |file|
        process_file file
      end
    end
  end

  def quit
    exit
  end

  def method_missing(cmd, *args)
    puts "Error: Unknown command '#{cmd}'."
  end

  def monoid(mon)
    @objects << RLSM::Monoid.new(mon)
    @monoid = @objects.last
  end

  def dfa(dfa)
    @objects << RLSM::DFA.create(dfa)
    @dfa = @objects.last
  end

  def regexp(re)
    @objects << RLSM::RE.new(re)
    @re = @objects.last
  end

  def show(obj = nil)
    obj ||= @objects.last
    if obj
      puts obj.to_s
    else
      puts "No object present."
    end
  end

  def help(*args)
    puts "Not implemented."
  end

  def db_stat
    stat = RLSM::MonoidDB.statistic
    result = stat.shift.join(' | ')

    column_widths = result.scan(/./).inject([0]) do |res,char|
      if char == '|'
        res << 0
      else
        res << res.pop + 1
      end

      res
    end

    result += ("\n" + '   ' + result.gsub(/[^|]/, '-').gsub('|', '+'))

    stat.each do |row|
      justified = []
      row.each_with_index do |col,i|
        col = col.to_s
        space = ' '*((column_widths[i] - col.length)/2)
        extra_space = ' '*((column_widths[i] - col.length)%2)
        justified << space + col + space + extra_space
      end

      result += ("\n" + '   ' + justified.join('|'))
    end

    result
  end

  def db_find(args)
    count = RLSM::MonoidDB.count(args)
    @search_result = RLSM::MonoidDB.find(args).flatten
    "Found: #{count[0]} monoid(s) (#{count[1]} syntactic)\nSaved result in @search_result"
  end

  def describe(*args)
    puts "Not implemented."
  end

  private
  def interactive_mode
    puts "Starting interactive mode ..."
    puts "Type 'help' to get an overview of all availible commands or"
    puts "type 'help :help' for an explanation of the help system."

    #setup_help_system
    setup_readline

    loop { process_command Readline.readline("smon:> ", true) }
  end

  def setup_readline
    require 'readline'
    @_commands = %w(quit exit help show describe monoid regexp dfa
    db_find db_stat) + RLSM::MonoidDB::Columns.map { |c| c.inspect + " =>" }

    Readline.completion_proc = lambda do |str|
      pos = @_commands.find_all { |cmd| cmd =~ Regexp.new("^#{str}") }
      pos.size == 1 ? pos.first : nil
    end
  end

  def process_file(file)
    unless File.exists? file
      puts "Error: File '#{file}' not found."
      exit
    end

    puts "Processing file '#{file}' ..."
    script = File.open(file, 'r') { |f| f.read }
    begin
      instance_eval script
    rescue Exception => e
      puts "Error while processing '#{file}'."
      p e
    end
  end

  def process_command(cmd)
    begin
      if cmd =~ /^(show|describe|help)/
        instance_eval(cmd)
      elsif cmd =~ /^db_/
        puts "=> " + instance_eval(cmd).to_s
      else
        puts "=> " + instance_eval(cmd).inspect
      end
    rescue RLSMException => e
      puts "An error occured."
      p e
    rescue SystemExit
      puts "Cya."
      exit
    rescue Exception => e
      puts "An unexpected error occured."
      p e
    end
  end
end

SMON.new.run ARGV
